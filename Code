import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

#PIMA DIABETES DATASET

#loading the diabetes dataset to pandas dataframe
diabetes_dataset=pd.read_csv(r"diabetes.csv")

#printing the first 5 rows of the dataset
diabetes_dataset.head()

#number of rows and columns in this dataset\
diabetes_dataset.shape

#getting the statistical measures of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()
#0 represents non-diabetic and 1 represents diabetic

diabetes_dataset.groupby('Outcome').mean()

#separating data and labels
X=diabetes_dataset.drop(columns='Outcome',axis=1)
Y=diabetes_dataset['Outcome']

print(X)

print(Y)

#data standardization
scaler=StandardScaler()

scaler.fit(X)

standardized_data=scaler.transform(X)

print(standardized_data)

X=standardized_data
Y=diabetes_dataset['Outcome']

print(X)
print(Y)

#Train Test Split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape, X_train.shape, X_test.shape)

#Training the model
classifier=svm.SVC(kernel='linear')

#training the support vector machine classifier
classifier.fit(X_train,Y_train)

#model evaluation
#accuracy score on the training data
X_train_prediction=classifier.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print('Accuarcy score of the training data :',training_data_accuracy)

#accuracy score on the test data
X_test_prediction=classifier.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print('Accuarcy score of the test data :',test_data_accuracy)

#making a predictive system
#input_data=(1,85,66,29,0,26.6,0.351,31)
input_data=pd.DataFrame({'Pregnancies':[int(input('Enter your Pregnancies count'))],'Glucose':[int(input('Enter your glucose level'))],
                   'BloodPressure':[int(input('Enter bp level'))],'SkinThickness':[int(input('Enter skin thickness'))],
                   'Insulin':[int(input('Enter Insulin level'))],'BMI':[float(input('Enter bmi'))],'DiabetesPedigreeFunction':[float(input('Enter DiabetesPedigreeFunction'))],'Age':[int(input('Enter Age'))]})


#changing the input data to a numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshape he array as we are predicting for one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

#standardize the input data
std_data=scaler.transform(input_data_reshaped)

print(std_data)

prediction=classifier.predict(std_data)
print(prediction)

if (prediction[0]==0):
    print('The person is non-diabetic')
else:
    print('The person is diabetic')
